global
	# maximum number of simultaneous active connections
	maxconn 50000
	# Uncomment the statement below to turn on verbose logging
	#debug

	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# Default ciphers to use on SSL-enabled listening sockets.
	# For more information, see ciphers(1SSL). This list is from:
	#  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
	ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS
	ssl-default-bind-options no-sslv3

	
defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
	timeout connect 5000
	timeout client  50000
	timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http
        
	# Maximum number of simultaneous active connections from an upstream web server
	# per service
	maxconn 25000

	# Unfortunately, per the haproxy docs, connection-based load balancing is
	# not a good strategy for HTTP
	balance roundrobin

	# Maximum number of simultaneous active connections from an upstream web server
	# per service
	maxconn 25000

	# Abort request if client closes its output channel while waiting for the 
	# request. HAProxy documentation has a long explanation for this option.
	option abortonclose

	# If sending a request to one server fails, try to send it to another, 3 times
	# before aborting the request
	retries 3

	# Check if a "Connection: close" header is already set in each direction,
	# and will add one if missing. Also add X-Forwarded-For header
	option httpclose

	# Do not enforce session affinity (i.e., an HTTP session can be served by 
	# any Mongrel, not just the one that started the session
	option redispatch

	# Amount of time after which a health check is considered to have timed out
	timeout check 5s

	# Keep timeouts at web speed, since this balancer sits in front of everything
	# Backends will force timeout faster if needed.
	timeout client  30s
	timeout connect 30s
	timeout server  30s

backend backendApi
	balance roundrobin
	option forwardfor
	server apiServer 104.236.207.219:7002 check

backend backendAdmin
	balance roundrobin
	option forwardfor
	server adminServer 104.236.207.219:80 check

frontend web
	bind *:80
	mode tcp
	option tcplog
	default_backend backendAdmin

frontend nodeServer
	bind *:7002
	mode tcp
	option tcplog
	default_backend backendApi

listen mongodb
	bind *:27017
	mode tcp
	option tcplog
	balance roundrobin
	server mongodb 159.203.115.191:27017 check

listen mqtt
	bind *:2052
	mode tcp
	option tcplog
	balance roundrobin
	server mqtt 104.131.60.78:1883 check

listen mqtt_ws
	bind *:2082
	mode tcp
	option tcplog
	balance roundrobin
	server mqtt_ws 104.131.60.78:1884 check

listen mqtt_wss
	bind *:2083
	mode tcp
	option tcplog
	balance roundrobin
	server mqtt_wss 104.131.60.78:2083 check
	
listen elastic
	bind  *:9200
	mode tcp
	option tcplog
	balance roundrobin
	server elastic 45.76.180.89:9200 check

listen kibana
	bind  *:5601
	mode tcp
	option tcplog
	balance roundrobin
	server kibana 45.76.180.89:5601 check

listen stats 
	bind  *:1936
	# Enable the statistics page
	stats enable
	mode http
	stats uri /
	stats auth admin:admin
	stats hide-version
	stats realm Haproxy\ Statistics

